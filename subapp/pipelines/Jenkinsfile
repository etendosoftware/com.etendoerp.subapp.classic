pipeline {
    options {
        // This limits build concurrency to 1 per branch
        disableConcurrentBuilds()
    }

    environment {
            CONTEXT_NAME        = 'etendo'
            BBDD_SID            = 'etendo'
            BBDD_PORT           = '5432'
            BBDD_SYSTEMUSER     = 'postgres'
            BBDD_SYSTEMPASS     = 'syspass'
            BBDD_USER           = 'tad'
            BBDD_PASSWORD       = 'tad'
            NEXUS_USER          = credentials('nexus-admin-user')
            NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
            GITHUB_USER         = 'etendobot'
            GITHUB_TOKEN        = credentials('github-read-package-token')
            ACCESS_TOKEN        = credentials('access-token-bitbucket')
            NPM_TOKEN           = credentials('access-token-nexus')
            JAVA_HOME           = '/usr/lib/jvm/java-11-openjdk-amd64'
            CATALINA_HOME       = "${WORKSPACE}/apache-tomcat-8.5.75"
            EMAIL_ADDRESS       = credentials('email_builds')
            URL_REPO            = 'https://bitbucket.org/koodu_software/etendo_mobile'
            COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
            COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()
    }

    agent {
        label 'etendo_core' //The id of the slave/agent where the build should be executed, if it doesn't matter use "agent any" instead.
    }

    stages {
        stage ('Build Enviroment') {
            steps {
                script {
                    try {
                        sh 'npm config set registry "https://repo.futit.cloud/repository/npm-group/"'
                        sh 'npm config set always-auth true'
                        sh 'npm config set _auth $NPM_TOKEN'
                        sh "yarn install"
                        sh 'PGPASSWORD=$BBDD_SYSTEMPASS psql -h localhost -d $BBDD_SYSTEMUSER -U $BBDD_SYSTEMUSER -c "DROP DATABASE IF EXISTS etendo;"'
                        withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                            withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                                env.STATUSBUILD = "1"
                                sh 'echo Building Environment'
                                sh """
                                git config user.name "$GIT_USERNAME"
                                git config user.email "$GIT_USERNAME"
                                """

                                // Clone etendo core
                                sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile}\" git clone --branch develop git@github.com:etendosoftware/etendo_core.git etendo_core'
                                // End clone

                                dir("etendo_core") {
                                    sh 'printenv'
                                    sh """
                                    echo -e "context.name=${CONTEXT_NAME}\n
                                    bbdd.sid=${BBDD_SID}\n
                                    bbdd.port=${BBDD_PORT}\n
                                    bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                                    bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                                    bbdd.user=${BBDD_USER}\n
                                    bbdd.password=${BBDD_PASSWORD}\n
                                    nexusUser=${NEXUS_USER}\n
                                    nexusPassword=${NEXUS_PASSWORD}\n
                                    githubUser=${GITHUB_USER}\n
                                    githubToken=${GITHUB_TOKEN}\n
                                    allow.root=true\n
                                    org.gradle.jvmargs=-Xmx3g -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" > gradle.properties
                                    """
                                    sh 'wget -O apache-tomcat-8.5.75.tar.gz https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.75/bin/apache-tomcat-8.5.75.tar.gz'
                                    sh 'tar -xvf apache-tomcat-8.5.75.tar.gz -C $WORKSPACE'
                                    sh './gradlew dependencies --refresh-dependencies --info'
                                    sh './gradlew setup --info'
                                    sh './gradlew expandModules --info --stacktrace'
                                    sh './gradlew install --info --stacktrace'
                                    sh './gradlew smartbuild --info --stacktrace'
                                    sh 'PGPASSWORD=$BBDD_PASSWORD psql -h localhost -p 5432 -U $BBDD_USER -d $BBDD_SID -c \"INSERT INTO public.smfsws_config(smfsws_config_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby, expirationtime, privatekey) VALUES (\'9BD91CCF0C7746A3B6B99C645D71B356\',0,0,\'Y\',now(),100,now(),100,0,\'%^v^bCQ~RD+9*SK0k?b\\$kTyKD-niHtH8qGfIzjqxwYvMyAvaQ1.lU?zwCs?v)|4M\');\"'
                                    sh 'PGPASSWORD=$BBDD_PASSWORD psql -h localhost -p 5432 -U $BBDD_USER -d $BBDD_SID -c \"UPDATE public.ad_window_access SET em_smfmu_mobileview=\'Y\' WHERE ad_role_id=\'42D0EEB1C66F497A90DD526DC597E6F0\' and ad_window_access_id=\'F7E52F19C8ED4F2380B1CF3B476228B0\'\"'
                                    sh 'PGPASSWORD=$BBDD_PASSWORD psql -h localhost -p 5432 -U $BBDD_USER -d $BBDD_SID -c \"UPDATE public.ad_window_access SET em_smfmu_mobileview=\'Y\' WHERE ad_role_id=\'42D0EEB1C66F497A90DD526DC597E6F0\' and ad_window_access_id=\'9C5EB2F46C3A42398CD53E713CCA950A\'\"'
                                    sh 'PGPASSWORD=$BBDD_PASSWORD psql -h localhost -p 5432 -U $BBDD_USER -d $BBDD_SID -c \"UPDATE public.ad_window_access SET em_smfmu_mobileview=\'Y\' WHERE ad_role_id=\'42D0EEB1C66F497A90DD526DC597E6F0\' and ad_window_access_id=\'3F7E074E1BFE4D76AF6F95938E0C592D\'\"'
                                    sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh start '
                                    sh 'sleep 1m'
                                }
                            }
                        }
                        sh 'echo Build Succesful'
                        env.STATUSBUILD = "1"
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '....BUILD ENVIRONMENT FAILED....'
                        currentBuild.result = 'FAILURE'
                        failure('Build failed')
                        env.STATUSBUILD = "0"
                    }
                }
            }
        }

        stage('Run Tests') {
            when {
                expression {
                    env.STATUSBUILD == "1"
                }
            }
            steps {
                script {
                    try {
                        env.STATUSTEST = "1"
                        sh 'echo Running tests'
                        sh 'yarn test --testPathIgnorePatterns=etendo_core/'
                        sh 'echo Tests Succesful'
                        dir("etendo_core") {
                            sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh stop'
                        }
                    } catch (Exception e) {
                        echo 'TEST FAILED'
                        currentBuild.result = 'UNSTABLE'
                        unstable('TEST FAILED')
                        env.STATUSTEST = "0"
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh 'chmod a+x ./pipelines/build-update.sh'
            dir("etendo_core") {
                sh './gradlew --stop'
                sh 'PGPASSWORD=$BBDD_SYSTEMPASS psql -h localhost -d $BBDD_SYSTEMUSER -U $BBDD_SYSTEMUSER -c "DROP DATABASE etendo;"'
            }
        }
        success {
            withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                script {
                    sh './pipelines/build-update.sh etendo_mobile SUCCESSFUL "Successful" $GIT_USERNAME $GIT_PASSWORD $ACCESS_TOKEN'
                }
            }
            cleanWs deleteDirs: true
        }
        fixed {
            mail to: EMAIL_ADDRESS,
            subject: "âœ… FIXED - ${currentBuild.fullDisplayName}",
            body: """
${new Date()}
__________________________________________________________

âœ… ERRORS FIXED âœ…

Commit: ${URL_REPO}/commits/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>
            
The problems found in the previous run/s have been fixed!  ðŸ’ª
Check out the output in the following link: 
${env.BUILD_URL}
__________________________________________________________
            """
        }
        unstable {
            withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                script {
                    sh './pipelines/build-update.sh etendo_mobile FAILED "Failed Tests" $GIT_USERNAME $GIT_PASSWORD $ACCESS_TOKEN'
                }
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "ðŸš¨ TESTS FAILED - ${currentBuild.fullDisplayName}",
            body: """
${new Date()}
__________________________________________________________

ðŸš¨ BUILD UNSTABLE ðŸš¨

Commit: ${URL_REPO}/commits/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>
            
Some etendo_mobile tests have failed!
Check out the output in the following link: 
${env.BUILD_URL}
__________________________________________________________
            """
        }
        failure {
            withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                script {
                    sh './pipelines/build-update.sh etendo_mobile FAILED "Build Failed" $GIT_USERNAME $GIT_PASSWORD $ACCESS_TOKEN'
                }
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "ðŸš« ERROR - ${currentBuild.fullDisplayName}",
            body: """
${new Date()}
__________________________________________________________

ðŸš« ERROR ðŸš«

Commit: ${URL_REPO}/commits/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

The build or publication has failed unexpectedly.
To more information on the failing run visit: ${env.BUILD_URL}
__________________________________________________________
            """
        }
    }
    
}